# -*- coding: utf-8 -*-
"""CFA task.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WXQCnyP76eoFNwU0SRoJZf-jEuq7efHe
"""

!pip install yfinance --quiet

import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

ticker = "HCLTECH.NS"

data = yf.download(ticker, start="2018-01-01", end="2023-12-31")
data = data[['Close']].copy()
data.dropna(inplace=True)
data.head()

window = 20  # 20-day rolling window
data['rolling_mean'] = data['Close'].rolling(window=window).mean()
data['rolling_std'] = data['Close'].rolling(window=window).std()

# Compute rolling mean and std
close = data['Close'].squeeze()
rolling_mean = data['rolling_mean'].squeeze()
rolling_std = data['rolling_std'].squeeze()

# Calculate z-score safely
data['z_score'] = (close - rolling_mean) / rolling_std


# Drop rows with NaNs from rolling
data.dropna(inplace=True)

# Buy when Z < -1, Sell when Z > 1
data['position'] = 0
data.loc[data['z_score'] < -1, 'position'] = 1
data.loc[data['z_score'] > 1, 'position'] = -1
# Forward fill positions
data['position'] = data['position'].replace(to_replace=0, method='ffill').fillna(0)

data['returns'] = data['Close'].pct_change()
data['strategy_returns'] = data['position'].shift(1) * data['returns']

initial_capital = 100000
data['equity_curve'] = initial_capital * (1 + data['strategy_returns']).cumprod()

def performance_metrics(df):
    if 'equity_curve' not in df.columns or df['equity_curve'].dropna().empty:
        raise ValueError("DataFrame must contain a non-empty 'equity_curve' column")

    if 'strategy_returns' not in df.columns or df['strategy_returns'].dropna().empty:
        raise ValueError("DataFrame must contain a non-empty 'strategy_returns' column")

    # Core metrics
    cumulative_return = df['equity_curve'].iloc[-1] / initial_capital - 1
    annualized_return = df['strategy_returns'].mean() * 252
    sharpe_ratio = (df['strategy_returns'].mean() / df['strategy_returns'].std()) * np.sqrt(252)
    downside_std = df['strategy_returns'][df['strategy_returns'] < 0].std()
    sortino_ratio = (df['strategy_returns'].mean() / downside_std) * np.sqrt(252) if downside_std != 0 else np.nan
    max_drawdown = (df['equity_curve'] / df['equity_curve'].cummax() - 1).min()

    # Trade stats
    win_rate = (df['strategy_returns'] > 0).sum() / len(df['strategy_returns'].dropna())
    avg_profit = df['strategy_returns'][df['strategy_returns'] > 0].mean()
    avg_loss = df['strategy_returns'][df['strategy_returns'] < 0].mean()
    max_profit = df['strategy_returns'].max()
    max_loss = df['strategy_returns'].min()
    profit_factor = -avg_profit / avg_loss if avg_loss != 0 else np.nan

    return {
        'Cumulative Return': cumulative_return,
        'Annualized Return': annualized_return,
        'Sharpe Ratio': sharpe_ratio,
        'Sortino Ratio': sortino_ratio,
        'Max Drawdown': max_drawdown,
        'Win Rate': win_rate,
        'Profit Factor': profit_factor,
        'Avg Profit': avg_profit,
        'Avg Loss': avg_loss,
        'Max Profit': max_profit,
        'Max Loss': max_loss
    }

print(data.head())
print(data.shape)
print(data['equity_curve'].isna().sum())

metrics = performance_metrics(data)
pd.DataFrame([metrics])

plt.figure(figsize=(14, 6))
plt.subplot(2, 1, 1)
plt.plot(data['equity_curve'], label='Equity Curve')
plt.title('Strategy Equity Curve')
plt.legend()

plt.subplot(2, 1, 2)
plt.plot(data['z_score'], label='Z-Score', color='orange')
plt.axhline(-1, color='green', linestyle='--', label='Buy Threshold')
plt.axhline(1, color='red', linestyle='--', label='Sell Threshold')
plt.title('Z-Score over Time')
plt.legend()
plt.tight_layout()
plt.show()

plt.subplot(2, 1, 2)
plt.plot(data['Close'], label='Price')
plt.plot(data.loc[data['position'] == 1, 'Close'], '^', markersize=10, color='g', label='Buy')
plt.plot(data.loc[data['position'] == -1, 'Close'], 'v', markersize=10, color='r', label='Sell')
plt.title('Price with Trading Signals')
plt.ylabel('Price')
plt.legend()

